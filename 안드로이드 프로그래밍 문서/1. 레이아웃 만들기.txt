<안드로이트 프로그래밍>

1. 레이아웃 만들기

공식 개발도구(IDE) : 일반적으로 "안드로이드 스튜디오" 사용 (자바로 구성) 
자바 개발도구로 나왔던 intellij 를 확장해서 만들어진것.

안드로이도 SDK 에서 platforms 은 안드로이드 기기의 어떤 버전을 대상으로
필요한 것을 받을 것인지를 보여줌 . show package details 로 자세히 볼 수
있음. platform 은 그 버전에서 필수 설치되야 하는 것이고
가상으로 실행시켜보고 싶으면 system image 중 하나 설치해야 함
google play intel 추천

sdk tools 에서는 필수 항목은 이미 설치되어 있고
google play services , google usb , web driver , support repository 추천

동의 화면에서 왼쪽 화면에서 android sdk preview license  선택 추천

윈도우 사용자 계정 폴더 밑에 .android 만들어짐
또한 appdata > local > android 도 만들어지는데 재설치시 둘 삭제해야함

*bios : 컴퓨터의 하드웨어에 대한 설정 화면

#첫 프로젝트 만들기

프로젝트 위치 지정 가능. 하나의 프로젝트가 보통 하나의 어플리케이션.
company domain 은 없으면 가상으로 생각해서 넣어도 됨
(package name 과 관련)

form factor, minimum sdk 에서 앱의 유형 선택 가능
일반적으로 phone and tablet 선택 . 대상 단말 선택하면 보통 그 상위
버전도 호환 됌.

앱의 첫 화면은 스튜디오가 알아서 만들어줄 수 있음.
처음 프로젝트 들어가면 추가로 설치할게 있어서 오류가 몇번 날 수도 있음.
(sdk 설치에서 출시된 버전 말도 테스트를 위한 버전으로 설치한 경우)

맨 위에서 줄에 프로젝트 경로 표시됨.
activity_main.xml 은 화면 수성을 미리 보여줌.

*** 안드로이드에서 RUN = BUILD + 실행 , BUILD = COMPILE + LINK ; ***

run 하면 가상 단말(애뮬레이터)에서 앱을 실행해 볼 수 있다.
케이블 연결해서 실제 단말로 실행해볼수도 있음.

오른쪽 상단에 avd manager 에서 create virtual divice 할 수 있음.
5x 추천, 어떤 형태의 os 가 올라갈지도 선택 가능. 실행시키면 실제 핸드폰같은
동작 가능. (제조사가 바꾸기 전의 순정 상태로)

run 할때 보안 체크를 못 띄우는 버그가 날 수도 있음.
(기기에 어떤 앱이 접근해서 실행되려고 할때 권한을 받는)
(그땐 안드로이드 버전 낮춰서 바꾸면 된다.)

#바꾸어 보기

아래 쪽에 design 화면과 text(XML 코드) 화면 선택 가능
디자인 화면에서 선택한 각 요소는 선택하면 어트리뷰트 화면을 보면서 수정
할 수 있다.
또한 component tree 탭에서 xml  코드의 구조를 대충 볼 수 있음.

*xml 이란 ? : eXtensible Markup Language
markup language 종류 중의 하나 (그 중 하나로 html 이 있다.)
html 은 이미 약속한 태그들만 사용 가능하지만 xml 은 사용자 임의로 태그를
만들 수 있다. (html 도 임의 태그 넣는게 가능은 함.)
태그로 데이터를 설명한다는 것은 html 과 동일.
데이터의 표시가 "Markup"
더 필요한 데이터가 생길시 태그추가나, 태그안의 내용을 추가할 수 있다는
점이 "Extensible".
- 텍스트 기반이며 간결한 데이터형이다.
- 웹에서 디스플레이 표준을 HTML로 한것처럼 데이터의 표준으로 만들기 위한 노력이 있음.
- 마크업언어(HTML)가 아니라 마크업언어를 정의하기 위한 언어이다.
- 자신의 어플리케이션에 적합하게 작성 가능 하다. 

*Application 이란 ? : 컴퓨터 처리에 대상이 되는 것들을 총칭해서 말한다.
interface : 어떠한 리소스를 토데로 결과물을 만들거나 도출할 때 쉽게 하기
위해 도움을 추는 존재

즉, API : 컴퓨터 처리에 있어서 프로그래밍을 쉽게 하게 해주는 인터페이스

XML 태그 예시 : TextView, Button

* FILE > SETTINGS 에서 editor 설정 가능.
editor > general  > auto import 에서 add unambiguous, optimize import
체크 추천

디자인 탭의 button 은 textview 를 상속받은 태그. 
html 과 동일하게 onclick 속성 사용.
MainActivity.java 에서
MainActivity 클래스 아래에 public 으로 함수를 만들면 연결
매개변수에 View v 받을 수 있음.

코드 예시 ) Toast.makeText(getApplicationContext(), "내용", Toast.LENGTH_LONG).show(); 
>> 화면에 토스트 메세지를 띄움. 잠깐 떴다가 사라지는걸 토스트라고 한다.

디자인 탭의 palette 에서는 미리 정해진 테그 객체 몇가지를 끌어올 수 있다.

코드예시 ) Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("http://m.naver.com"));
   	startActivity(intent);



---------------------------------------------------------------------
#프로젝트 살펴보기

새로운 프로젝트를 만드는 화면
* package name : 분류된 클래스들 여러개가 모여있는 것.
여기서 package name 은 유일성이 있는 것으로.

empty activity 를 선택했을 경우 기본으로 만들어지는 파일들이 있는데
하나의 화면은 두개(하나의 자바 파일과 하나의 xml 파일이 쌍으로)의 파일로
이루어진다. 안드로이드에서는 화면이 activity 라고 불림.

* 파일구조 
app > java > (pakage 도메인 이름) > 자바 파일
app > res > layout > xml 파일

# 프로젝트 창의 구성과 기능

file > setting 에서 프로젝트 관련 설정 가능.

Gradle : 프로젝트 빌드를 하기 위한 것. 빌드 관련 설정을 바꿀 수 있다.
상단 sync project 누르면 수동 업데이트 적용 가능

자바 파일 관련
편집기에서 객체에 마우스 대고 ctrl + q 하면 설명 읽을 수 있음.
매개면수에 마우스 대고 ctrl + P 누르면 변수 유형 볼 수 있음.
클래스 영역 안에 우클릭하면 generate 기능 에서 부모 클래스 메소드 골라서
재정의 할 수 있음.
edit 에서 finding path 로 필요한 파일 검색 가능.

XML  파일 관련
디자인 탭, text 탭으로 나뉨.
디자인 탭의 미리보기에서 어떤 객체의 properties 에서 text 누르면 원본
xml 코드 볼 수 있음.
Palette(팔레트) 창에서 기본 xml 객체들 끌어올 수 있다.

디자인 미리보기 화면은 기본 화면과 블루프린트 화면 두가지를 보여준다.
위쪽 인터페이스에서 단말기를 선택해서 화면 비율을 바꿀 수 있다.
또한 os 버전과 테마도 바꿀 수 있다.

XML 은 HTML 처럼 계층 구조를 가진다.




---------------------------------------------------------------------
#뷰의 속성
(화면을 어떻게 만드는가 ?)

뷰(VIEW) : 
안드로이드 화면에 들어가는 각각의 화면 구성 요소

뷰 그룹(view group) : 
뷰들을 여러 개 포함하고 있는 것. 뷰 그룹도 뷰를 상속받은 것. 곧 뷰임.
버튼, 텍스트 뿐만 아니라 이것들을 포함하는 눈에 보이지 않는 영역들까지

위젯(Widget) : 
뷰중 눈에 보이며, 일반적인 "컨트롤" 의 역할을 하고 있는 것.

레이아웃(Layout) : 
다른 뷰들을 담아놓는 것 뿐만 아니라 그것들을 배치하는 역할을 하는 것

//
* 어떤 뷰던지 layout_width , layout_height 가 기본적으로 필수.


상속의 개념은 c++ 과 동일
자바는 모든 소스가 클래스 안에 들어가도록 되어 있음.
자바의 클래스 상속은 extends (상속할 클래스 이름)
인데 안드로이드 자바 코드의 경우 AppCompatActivity (화면을 나타냄,액
티비 종류 중 하나) 를 상속받으면 그 클래스 자체가 화면이 된다고 할 수 있다.

> 때문에 화면과 관련된 기본 기능들을 받아서 쓸 수 있는 것.

자기자신 this, 부모는 super 
예시 ) super.onCreate()

테그 이름이 a.b.c 형태로 이어지게 되어있는 경우가 있다.
이 경우에는 패키지 이름까지 다 들어간 경우. 안드로이드가 제공하는 api
안에 포함되는 것은 걍 적으면 되지만, 개발자가 직접 만들거나 외부 라이브
러리를 쓰는 경우에는 저렇게 된다.

속성 맨 앞에 android: 가 붙는 경우는 안드로이드에서 기본으로 제공하는경우
속성 맨 앞에 app: 는 외부 라이브러리

layout_width 가 match_parent 가 지원이 안될 때는 그 객체를 담고있는
ConstraintLayout(제약 레이아웃) 에 속에 들어가있는 경우.
> 제약 레이아웃때문에 배치할 수 있는 경우가 제한되니까

원래 match_parent 는 부모 영역의 남는 영역을 꽉 채우라는 것.
wrap_content 는 담고있는 내용물에 딱 맞는 크기가 됨.

최상위 레이아웃의 xmlns:android="어쩌구" 는 하나의 파일에 하나씩은 
들어가는 안드로이드 api 의 정보를 가져다 쓰겠다는 정보

LinearLayout 테그의 속성으로는 android:orientation="어쩌구"
가 필수. 최상위 레이아웃을 이걸로 바꾸면 이제 그 내부 버튼의 배치도 달라지
고 match_parent 사용 가능.

 width, height 등에서 단위로 dp 를 쓸수도 있고 px 을 쓸수도 있는데
비율을 일정하게 하고 싶으면 상대적인 단위인 dp 를 쓰는게 좋음.

뷰의 크기 지정에 사용되는 단위:
px, dp or dip, sp or sip, in, mm, em 

#제약 레이아웃 (CounstraintLayout)
제약 레이아웃이 있을 때는 미리보기 탭 에 인터페이스 줄이 하나 더 생김.
위젯에는 핸들과 연결점(앵커 포인트)이 있다. 다른 것과 연결을 시킬경우
그게 제약조건이 되는 것.

연결은 부모 레이아웃에 붙일 수도 있고 다른 위젯의 연결점에 붙일 수도 있음.
자석모양 아이콘이 켜져 있을때는 연결이 자동으로 된다.
서로 다른 방향으로 연결선을 만들 때는 margin 을 적용하고 남는 영역을 
바이어스라고 하는데 이 영역에서의 위치도 조절할 수 있음.

자바 에서 xml 객체에 접근하고 싶을때 id 가 기준이 된다.

인터페이스중 가이드라인에서 세로와 가로가 있는데 이걸 화면상에 띄우면
제약조건을 붙일 수 있는 기준선이 될 수 있음. 

text 탭과 design 탭에서 적용하는 변경사항들은 전부 상대쪽에 자동 적용됨.




--------------------------------------------------------------------
#대표적인 레이아웃 살펴보기

>> 어떤 앱의 화면을 만들고 싶으면 일단 레이아웃 구조부터 생각하자.

제약 레이아웃(CounstraintLayout) :
제약조건 기반 모델
제약조건을 사용해 화면을 구성하는 방법

리니어 레이아웃(LinearLayout) : 
박스(Box) 모델
한 쪽 방향대로 차례대로 뷰를 추가한다. 방향 지정해줘야 함.
Vertical , Horizontal 중첩 가능.

상대 레이아웃(RelativeLayout) :
규칙(Rule) 기반 모델
부모 컨테이너 or 다른 뷰와의 관계 이용.

프레임 레이아웃(FrameLayout) :
싱글(Single) 모델
가장 상위에 있는 하나의 뷰 또는 뷰그룹만 보여줌.
여러 개의 뷰가 들어가면 중첩하여 쌓게 됨.

테이블 레이아웃(TableLayout) :
격자(Grid) 모델
격자를 사용할 수 있는 모델이 따로 있기 때문에 
HTML 에서 많이 사용하는 정렬 방식과 유사하지만 많이 사용하지는 않음.

//

뷰의 영역
html 과 비슷하게 뷰의 영역 안에 margin, border, padding 이 있음.

색 표현은 html 과 동일. * 맨 앞 16진수 두개는 투명도.

#리니어 레이아웃
방향 디폴트는 가로방향 지정하고 싶으면 
android:orientation="vertical or horizontal"
vertical 일 때, width 를 warp_content 해서 공간이 시각적으로는 비어보여도
다른 객체 추가 불가.

* 미리보기 화면에서 안보이는 뷰는 component tree 에서 선택하자.

방향을 horizontal 해놓고 버튼을 match_parent 해버리면 나머지 버튼들이
보이지 않는다. 이런점 조심하자.

속성 중 view all property 해보면 layoutgravity 에서 정렬 기준 고를 수 있음.
이 정렬기준이 영어로는 gravity 로 표현

layoutgravity 말고 그냥 gravity 는 어떤 테그 객체 내용물의 정렬 기준을 
고르게 해줌.

속성에서 margin, textSize(단위 sp , dp 사용 추천), textColor 등 조절 가능.

-새로운 xml 파일 추가 ?
xml 파일을 추가하고 싶으면 layout 에 추가하면 됨.
물론 이것만 만들어서는 화면의 기능을 못하고 자바 파일과 연결되어야 함.
layout_weight 속성 : 남는 공간 할당 이 수를 조절하여 공간분할 비율 조정.


#상대 레이아웃
미리보기에 객체 끌어다 넣으면서 어느 뷰에 의존해서 붙을 건지 결정하고
예를들어
xml 코드에서 android: layout_alignParentLeft ,
있으면 부모 객체의 왼쪽에 붙어있는 것.
android: layout_blew="@+id/button" 있다면 id 가 button 인 객체 아래에 
붙었다는 것.
*xml 에서는 id 로 지정할 때 @+id/ 를 붙임.

새로운 태그를 추가했는데 그게 기준의 태그를 가릴 수 있음.
이 때 layout_above 로 다른 객체에 대비하여 어떤 위치에 오라고 지정할 수
있음.


#프레임 레이아웃과 뷰의 전환
레이아웃 중에서 가장 단순함 
한 번에 하나의 뷰만 보여주며, 다른 뷰들은 그 아래에 중첩되어 쌓임.
뷰의 가시성 속성을 이용해 다양한 화면 구성이 가능함.


* 안드로이드 스튜디오와 에뮬레이터는 리소스를 많이 먹는다. 그 때문에 
property 에서 뭔가를 건드릴 때 반응이 느릴 수 있음.

기본적으로 프로젝트에 부가적으로 필요한 파일들은 app > res > drawable
에 넣으면 된다. 
이미지는 imageView 태그로 넣는다. 이 태그를 레이아웃에 끌어다 넣으면서
소스 선택 가능.

이제 버튼에 함수 연결해서 id 로 이미지 태그객체를 찾아 visiblity 속서을 누를 
때마다 바뀌게 하면 한 공간에 사진 전환 가능.
> 실행될때마다 index 값 바꿔주면서 그 값에 맞는 사진을 나오게 하도록

* imageView=(ImageView) findViewById(R.id.imageView) 
ImageView imageView; 클래스변수로 미리 선언되어 있어야 함.
> 대문자 R은 리소스를 가리킴.

*imageView.setVisibility(View.VISIBLE);
여기서 imageView 는 태그 객체 담아 뒀던 객체

run 과정 : 빌드가 끝나면 apk라는 설치 파일을 만든 다음에 애뮬레이터에
	복사해서 설치한다. 배포도 마찬가지로 apk 를 올리는 것.
apk 는 앱 응용프로그램이 아니라 "설치 파일" 이다 ?




---------------------------------------------------------------------
#기본 위젯들

예시)
textView:
text, textColor, textSize, textStyle, typeFace(폰트종류),maxLines(최대줄수)

checkbox, radioButton, ToggleButton(눌렀을 때와 아닐 때 차이) 등
뷰 중 containers 카테고리는 여러개의 요소를 그룹으로 묶기 좋음.

*RadioButton radioButton=(RadioButton)findViewById(R.id.radioButton)
  boolean checked = radioButton.isChecked();

일반적으로 입력상자는 plantext 위젯 사용(inputType 속성 중요)

이미지 태그의 xml 상에서 소스는 app: srcCompat="@res폴더 아래 경로"
속성으로 경로 표시됨.

* "android: src" or "app: srcCompat"




--------------------------------------------------------------------
#상태 드로어블
(화면에 그릴 수 있는 것 ?)

*드로어블 종류
-비트맵 드로어블 
-상태 드로어블
-전환 드로어블
-쉐이프 드로어블
-인셋 드로어블
-클립 드로어블
-스케일 드로어블

현제 가장 많이 사용되는 것은 상태 드로어블, 쉐이프 드로어블

res -> drawable 밑에 이미지 파일 등의 소스 뿐만 아니라 xml 도 넣을 수 있음.

drawable 폴더에 상황에 따른 이미지와 xml 파일을 넣고 그 이미지가 나오는
배경과 상황이 xml에 들어갈 것.

ex) 눌렀는지 아닌지에 따라 내부 이미지가 다른 버튼 ? (좋아요 버튼)
attribute 에서 background 등의 속성을 볼때 오른쪽 ... 으로 파일 지정 가능.

*폴더 우클릭 했을때 만들 파일 종류 선택 가능 

drawable 에 만든 xml 파일도 선택하면 팔레트와 미리보기 화면이 보임.
이때 기본으로 있는 selector 가 있는데 이는 상황에 따라 다른 것을 보이겠다
는 의미

그 안에 이제 item 태그로 
속성을 android:drawable="@drawable/ic_thumb_up"
로 하면 이 이미지를 보여주겠다는 것.
또 아이템 태그를 하나 더 만들어서 
android:state_pressed="ture"
android:drawable="@drawable/ic_thumb_up_selected"
넣으면 상황에 따라 구분

이제 버튼의 background 를 이 파일로 지정.
버튼이 아니더라도 일반적인 뷰면 적용 가능.


#쉐이프 드로어블
(도형을 만드는 수준)

-기본 도형 만들어보기
xml 파일 안에 최상위 태그를 selector 말고 shape 로 바꿔보자.
그 안에
<size android:width="200dp" android:height="120dp"/>
<stroke android:width="1dp" android:color="#0000ff"/>
<solid android:color="#aaddff" />
<padding android:bottom="1dp" />

ex) View 태그 안에 background 로 xml 넣어주고 크기를 wrap_content
      해버리면 엄청 커짐 ??? drawble shape 에서의 크기와 메인 페이지에서
      태그의 크기와 연동이 안되는 듯.

shape 속성 android:shape="여기 조정하면 모양 변경 가능"

-gradient color 지정하는 방법
shape 아래에 
    <gradient
        android:startColor="#7288DB"
        android:centerColor="#3250B4"
        android:endColor="#254095"
        android:angle="90"
        android:centerY="0.5"
     />
    <corners android:radius="2dp" />
하면 그라데이션 가능


-테두리만 있는 버튼 만들기
drawable xml 을 layer-list
로 만들고 아래에
 
    <item>
        <shape android:shape="rectangle">
            <stroke android:width="1dp" android:color="#BE55DA" />
            <solid android:color="#00000000" />
        </shape>
    </item>

    <item android:top="1dp" android:bottom="1dp" 
android:right="1dp" android:left="1dp">
        <shape android:shape="rectangle">
            <stroke android:width="1dp" android:color="#BE55DA" />
            <solid android:color="#00000000" />
        </shape>
    </item>




>> 상대 레이아웃과 리니어 레이아웃만 잘 복습해도 왠만한 화면은 만들 수 
있음.
레이아웃은 화면의 구성을 만드는 역할 !






















 









  












 


 











 
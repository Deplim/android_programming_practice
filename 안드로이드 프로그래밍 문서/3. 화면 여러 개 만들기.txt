<안드로이드 프로그래밍>

3. 화면 여러 개 만들기

#화면 구성과 화면 간 전환

액티비티는 우리가 직접 관리하는 게 아니라 안드로이드 os 에서 관리를 한다. 
이렇듯 "애플리케이션 구성요소" 들을 안드로이드 시스템이 관리한다.
그 요소들로는

1.액티비티 : 화면을 나타냄
2.서비스 : 화면이 없지만 기능적인 동작을 가지고 있음. ex : 단말 자체에서 문자를 받아주는 기능
3.브로드캐스트 수신자 : ex ) 문자를 받았을때 그걸 어떤 앱에게 넘겨줘야 할지 결정
4.내용 제공자 : 시스템 자체의 기능을 직접 사용하는 것은 권한 문제가 있으니, 자원들을 내용 
                       제공자를 거쳐서 사용하게끔 함.

우리가 이중에 하나를 만들면 이스템이 그 정보를 알 수 있음. (앱을 설치하는 시점에)
그 확인하는 수단이 manifest 임.


// 추가적으로 액티비티를 만들때도 마찬가지로 xml 하나와 자바 파일 하나가
쌍으로 이루어져야 한다.

* 인플레이션은 xml 을 메모리에 올린다고도 할수도 있지만 메모리에 "객체화"
 한다고도 표현할 수 있다.

새 화면을 만들려면 app 우클릭에서 acitivity 와 만들 화면의 유형을 선택할
수 있다.
이렇게 새로운 액티비티가 만들어지면 
app > manifest > AndroidManifest.xml 에 activity 라고 하는 태그로 
액티비티가 등록되 있을 것이다.
여기서 application 태그는 그 앱을 의미하고, activity 하는 태그로 MainActivity
(메인화면)가 등록이 되어 있다. (name=".MainActivity")
그러면 실행이 될때는 안드로이드 시스템의 액티비티 매니져가 이 액티비티를
찾아서 관리를 한다. 
물론 액티비티를 추가를 하면 여기에도 또 activity 가 하나더 자동으로
추가가 된다.


예시 ) "메뉴화면" 은 "메인화면" 의 버튼을 누르면 띄워줄 것이다.
메인화면의 자바 소스 코드에 버튼을 클릭하면(onclick 지정을 하든 listener
를 사용하든 상관 없) 
Intent intent = new Intent(getApplicationContext(), MenuActivity.class);
startActivity(intent);

(메뉴화면의 자바소스 이름을 MenuActivity.java 라고 했다고 칠때)
저런식으로 메뉴 화면으로 전환할 수 있다.
여기서 이제 다시 메인화면으로 돌아올 때 응답을 받아야 하는 경우가 있다.
이때는 그냥 스타트액티비티 대신 
startAcitivtyForResult(intent, 101)
여기서 101은 응답을 받을 때 화면을 구분하기 위한 코드.

이제 메뉴 액티비티에서는 버튼을 하나 만들어서 눌렀을때 메인 액티비티로 
돌아가게 해보자.
finish(); 
하면 메뉴화면이 없어지고 메인화면이 보인다.

*어떤 화면을 열면 부모 화면은 그 밑에 깔려있는 개념이기 때문에 finish 하면
보이는것 !
*xml 이 분리되어 있으므로 뷰 객체의 id 는 그 안에서만 고유하면 된다. 

메인 화면쪽으로 데이터를 넘기고 싶으면 그 또한 시스템이 해주는 거기 때문에
인텐트를 사용해야 한다.
finish 하기 전에 intent.putExtra("name", "mike")
setResult(Activity.RESULT_OK, intent)
여기서 name 이 key값이고 mike 가 데이터다.
또한 Acitivity.RESULT_OK 는 정상 응답임을 의미한다.
Extra data 는 조연과 같은 역할을 해서 시스템은 액스트라 정보를 받아도
해석하지 않고 그냥 통과시켜서 메인 액티비티에 전달하게 된다.

이제 전달된 데이터를 받으려면 MainAcitivity 에서 응답을 받을 메소드를 하나
정의해야한다.
메인 액티비티의 클래스에서 부모 클래스 중에서 onActivityResult 를 오버라이
딩 하면 data 매개변수로 응답이 전달된다. 또 매개변수 requestCode 는 어떤
페이지로부터 응답을 받은건지 알 수 있게 한다.
if(requestCode==101){
    String name = data.getStringExtra("name");
    (이제 받은 name 은 원하는대로 사용)
}

일반적인 스토리지 사용법처럼 put으로 넣고 get으로 받는다 !

*manifest 에서 액티비티의 라벨, 테마등을 설정할 수 있다.

*인텐트란 ? : 시스템이 화면을 관리하고 있으니까 띄워주거나 없애주거나도
결국 시스템이 관리를 하므로, 시스템이 알아들을 수 이는 포맷으로 요청을
해야 한다. 그 역할을 하는게 인텐트 객체이다.



//정리
startActivity 메소드를 통해 시스템에 인텐트 객체를 넘기면 이를 해석해서
메뉴 액티비티를 띄울 수 있는것.  인텐트 안에 어떤 데이터를
넘길 수도 있고 extra 인 경우 해석하지 않고 그냥 넘긴다는 것.




----------------------------------------------------------------------
# 인텐트

예시)
//보내는 Activity
Intent intent = new Intent(현재Activity명.this, 이동할Activity명.class);
intent.putExtra("strParamName", Value);
startActivityForResult(intent, 1);

//받는 Activity
Intent intent = getIntent();
String strParamName = intent.getStringExtra("strParamName");


인텐트는 액티비티 사이끼리만 전달되는것이 아니고 안드로이드 구성요소중
액티비티, 서비스, 브로드캐스트 수신자 사이에서 서로 전달될 수 있으며,
안드로이드 시스템 안에서 상당히 많이 왔다갔다 하는 객체이다.

액션과 데이터를 사용하는 대표적인 예
ACTION_VIEW tel:01077881234 를 속성으로 인텐트를 시스템이 받으면
전화걸기가 가능한 앱을 찾아서 띄워줌. 이때 시스템이 전화걸기가 가능하다고
등록이 되어있는 앱을 찾아서 권한 등을 체크함.
또 http 어쩌구가 있으면 웹브라우징이 가능한 앱을 찾는다.

>> 우리가 명시적으로 액티비티를 지정하는게 아닌 특정한 데이터를 넣어
주면 그 데이터에 맞는 앱을 알아서 띄워주는 것을 암시적인 인텐트라고 한다. 

인텐트의 대표적인 속성

1. 범주
2. 타입
3. 컴포넌트
4. 부가 데이터

예시 ) 버튼 누르면 전화걸기
입력상자랑 버튼 하나 만들어서 입력상자에 전화번호 하나 넣은 다음 
버튼 누르면 리스너에서 
String receiver= (입력상자객체).getText().toString(); 
Intent intent = new Intent(Intent.ACTION_DIAL, Uri.parse("tel:"+receiver));
startActivity(intent);

* 여기서 전화걸기 앱이 여러개면 선택할수 있도록 선택창을 띄워준다.

* 얻어온 특정 객체를 클래스의 어떤 메소드에서든지 사용하게 하고 싶으면
지역변수 말고 클래스 변수로 할 것을 잊지 말자.

인텐트를 꼭 new 하는 순간에 매개변수를 넣어줘야 하는게 아니라
Intent intent2= new intent();
ComponentName name = new ComponentName("패키지 이름", "패키지 이름.액티비티이름")
intent2.setComponent(name);

처럼 나중에 설정할 수도 있음.


// 권한 정보에 대해
권한은 manifest 파일에서 설정

예시 ) sd 카드 읽기 퍼미션 받기
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />

쓰는 권한은 또 따로 받아야 한다.

*위험 권한은 단지 manifest 에 쓰는 것 뿐만 아니라 앱이 실행될 때 대화상자
를 띄워서 직접 권한 승인을 받거나 해야 한다.
만약 이걸 안하고 싶으면 Gradle Scripts > build.gradle
에서 targetSdkVersion 의 버전을 낮추면 된다. (위험 권한은 23 버전부터 도입)
그리고 바로 sync now 해주면 바로 적용된다.


# 부가 데이터 

*부가 데이터말고 플래그를 이용해서 정보를 보낼 수도 있다. 

보내는 데이터는 기본적인 스트링이나 숫자 외에 객체를 보낼 수도 있다.

"액티비티는 스택 구조로 되어 있다."
현제 실행 중인 것만 화면에 나와있고 나머지는 액티비티 스택에 저장된다.
액티비티 뿐만 아니라 앱 또한 스택 구조로 쌓인다.

이렇게 순서대로 쌓다보면 우리가 원하는 대로 화면이 전환되지 않을 수 있다는
문제가 있다.
예시 ) 동일한 액티비티가 두개 쌓였을때 하나를 제거해도 똑같은 액티비티가 
보이는 경우
>> 때문에 동일한 액티비티는 쌓지 않고 재사용 되도록 한다. 이런것을 
"플래그" 라고 하며 이게 일종에 옵션정보이다. 

가장 많이 쓰이는 플래그
1. FLAG_ACTIVITY_SINGLE_TOP : 동일한 액티비티는 겹치지 않고 재사용
2. FLAG_ACTIVITY_NO_HISTORY
3. FLAG_ACTIVITY_CLEAR_TOP

플래그 사용법
>> intent.setFlag(Intent.(플래그))
예를 들어 single_top 을 썼다고 치면 새로 만들어지는 액티비티가 겹칠 땐
onCreate 가 호출되지 않는다.
그대신 별도로 onNewIntent 를 오버라이딩 해 두면 그 내용대로 다시 생성되는
것에 대해 이벤트 실행

이미 나와있던 액티비티를 삭제하면서 두 액티비티가 겹치게 될때도 중복을
없애주는 역할을 한다.


//객체 부가 데이터 전달하기.

인텐트 안에 번들(Bundle) 객체가 들어가 있어서 그 안에 데이터를 넣을 때는
put, 문자열을 가져올 때는 get 메소드를 사용합니다.

Serializable(직렬화) : 
어떤 객체 안에 있는 데이터를 다른 곳에 보내고 싶은데 그 안에 있는 데이터만 
뽑아내는 방법. 자바 객체를 전송할 때, 다시 복원할 수 있는 Stream으로 변형
시켜주는 것.
근데 이걸 사용하면 객체의 타입이나 이런 정보까지 같이 넘어가야 하니 용량이
커지는 문제가 있다.
그래서 안드로이드에서는 Parcelable 이라고 하는 것으로 만들어서 전달하는
것을 "권장". 
>> 객체 안의 변수들이 가지고 있는 데이터만 뽑아서 전달 할 수 있도록 함. 

이제 배열 하나를 만들어서(일반적인 스트링이나 숫자가 아닌) 
intent.putExtra 에 그대로 넣으면 메뉴 액티비티에서 
Intent passedIntent=getIntent();
processIntent(passedIntent);

private void processIntent(Intent intent){
    if(intent != null){
        ArrayList<String> names = (ArrayList<String>)intent.getSerializableExtra("names")        
    }
}


// Parcelable 정의하기.

new class create 에서 class 로 kind 를 설정하고 
나타나는 interface 에서 android.os.Parcelable 이라고 설정하고 열어보자.

* 이렇게 설정을 하고 만드는 것은 기본적인 형태를 잡아주는 것 뿐이며, 직접
코드를 수정한다면 그 이상 영향을 끼치는 것은 없다.

*extend 와 implement 의 차이점 : 둘다 상속이지만 
implement 는 부모의 메소드를 반드시 재정의해야한다. 또한 다중상속이 안
되는 extend 를 대신해서 다중상속을 할 수 있게 해준다. 

클래스 이름을 SimpleData 라 했다 치면
implement method 해서 기본적으로 필요한 메소드를 만들고, 

int number;
String message;

public SimpleData(int number, String message){
this.number=number;
this.message=message;
}

public SimpleData(Parcel src){
number=src.readInt();
message=src.readString();
}

public static final Parcelable.Creator CREATOR = new Parcelable.Creator(){
public SimpleData createFromParcel(Parcel src){
return new SimpleData(src);
}
public SimpleData[] newArray(int size){
return new SimpleData[size];
}
}

이제 writeToParcel 함수 에서는
Parcel 객체를 매개변수로 받고, 그 이름이 dest 라 치면
dest.writeInt(number) 로 Parsel 객체에 데이터를 입력해준다.

>>>  결국 Simple data 가 Parsel 로 바뀌는 것.
>>> Parsel 은 데이터를 다른곳에 전달하기 위해 사용
>>> Simple data 를 Parsel data 로 read 하고 write 할 수 있으면 된다.

이제
main 액티비티에서 SimpleData 객체를 하나 만들고 
바로 intent.putExtra("data", data) 할 수 있다.
* 기본적으로 intent는 객체를 받지 못함.

받는 것은
SimpleData data= (SimpleData) intent.getParcelableExtra("data")

*항상 데이터를 받으면 그걸 사용하기 전에 그게 비어있지는 않은지
data !=null 
같은 것을 먼저 해야 오류로 인해 멈추는 것을 막을 수 있다.




----------------------------------------------------------------------
# 액티비티 수명주기

수명주기 = 생명주기 = 라이프사이클

액티비티는 실행, 일시 중지 (액티비티 스택에 들어가 사용자에게 보이기는 
하지만 다른 액티비티가 위에 있어 포커스를 받지 못함), 중지(완전히 보이지
않음) 세가지 상태일 수 있다.

앱이 중지 상태가 될때 필요한 처리를 하거나 사용자에게 신호를 보낼 필요가 
있다.

// 수명주기 : 이미지로 저장
onCreate 는 수명주기 메서드 중 하나

*on 이 붙은 메서드는 대부분 콜벡 메서드이다.
* 필요한 메서드를 가져오는데 우클릭 적극 활용하자.

예시) 수명주기 메서드 안에서 토스트 메세지를 나오도록해서 언제 실행되는지
확인해보자.  
onCreate : 메모리에 액티비티가 만들어지고 초기화되는 시점.
onStart : onCreate 이후
onStop : 완전히 중지된 상태
onDestroy : onCreate 반대 메모리에서 리소스가 다 없어질 때.
onPause : 화면이 포커스를 잃을 때
onResume : onStart 이후 화면이 보여지기 직전.

일반적으로 onPause 단계에서 필요한 정보를 파일이나 데이터베이스에 저장
을 한다. 좀더 간변하게 저장 하기 위해 제공되는 것이 sharedpreferences()
저장 메소드)
SharedPreferences pref = getSharedPreferences("사용자설정이름", Activity.MODE_PRIVATE)
(name 은 저장할때와 복구할때 동일하게.)
SharedPreferences.Editor editor = pref.edit();
editor.putString("name", "소녀시대");
editor.commit();

복구 메소드 - resume 될 때)
SharedPreferences pref = getSharedPreferences("지정이름", Acitivity.MODE_PRIVATE);
if(pref !=null){
String name = pref.getString("name", "");
이제 name 은 원하는대로 사용.
}

>> sharedpreference 로 저장된 정보는 아예 앱을 껐다가 나중에 켜도 남아
있음.




---------------------------------------------------------------------
# 서비스

서비스는 앱 요소중에서 눈에 보이지 않지만 기능을 가지고 있는 영역
>> 자바 소스

서비스도 메모리에 만들어질때 startService, 그 안에서 onCreate
종료될 때 ondestroy. 시스템이 자원이 모자라서 서비스를 종료를 시켰다고 
하더라도 나중에 자동으로 자동 재시작을 해준다.

서비스를 만들고 싶으면 액티비티를 만들때 처럼 app 우클릭에서 
new service. 
>> 자바 클래스 형태로 만들어진다. 이 역시 애플리케이션 구성요소이기 
때문에 만들어지면 매니페스트에 자동으로 service 태그가 들어간다.

기본적으로 서비스는 Service 클래스 상속해서 만든다.


예시 ) 메인에서 버튼을 눌렀을때 서비스를 실행시키면서 데이터를 보내보자.
서비스 또한 직접 시작시키는게 아니라 시스템이 해줘야 하므로 인텐트를
사용해야 한다.

따라서 (서비스클래스 이름).class 를 매개변수로 하여 인텐트를 만들고
액스트라 데이터를 넣어준 다음, 이번엔 액티비티가 아닌 서비스이므로
startService(intent);
를 한다.

// 이제 서비스 클래스에서 
onCreate, onStartCommand, onDestroy 등을 상속받아오고
onCreate 에서는 
private static final String TAG="MyService"
Log.d(TAG, "onCreate() 호출됨.")
TAG 는 로그의 종류를 구분하기 위해 사용 !

서비스는 한번 시작하면 계속 실행이 되 있는다.
그래서 사실상 아무리 StartService을 여러번 해도 onCreate 는 다시 실행되
지 않는다.
그렇기 때문에 서비스는 인텐트로 온 정보등을 확인할 때는 onStartCommand
를 사용해야 한다.
onStartCommand 에서 매개변수로 intent 를 받고 나면
if(intent==null){
return Sevice.START_STICKY;
}
else{
processCommand(intent);
}

private void processCommand(Intent intent){
String command = intent.getStringExtra("command");
String name = intent.getStringExtra("name")
이 또한 로그로 찍어보자.
}

*로그는 안드로이드 스튜디오에 찍히는거.
onCreate 호출 뒤에 onStartCommand

* 서비스가 실행되어 있는지 여부는 안드로이드 스튜디오
tools > android > android device moniter
자신의 앱은 만들었던 패키지 이름으로 구분할 수 있음.


// 서비스에서 액티비티로 보내주는 상황도 있다.
ex- 채팅앱에서 화면을 띄우지 않은 상태로 실행되고 있다가 문자가 오면
화면을 띄우는 상황

자바에서 실행을 멈추고 싶으면 Thread.sleep(5000);

시스템의 코드에서도 마찬가지로 메인액티비티클래스를 매개변수로 인텐트를
만들고 
하고 액스트라데이터를 넣자.

이렇게만 하면 안 되는게 생기는게 서비스는 화면이 없기때문에 태스크라는 
정보가 없고, 때문에 화면이 있는 액티비티를 띄우는데 문제가 생기는 것.

(인텐트 이름).addFlag(Intent.FLAG_ACTIVITY_NEW_TASK);
하면 이제 화면을 띄울 수 있음.
일반적으로 FALG_ACTIVITY_SINFLE_TOP, FALG_ACTIVITY_CLEAR_TOP
을 같이 띄우는 경우가 많음.

아직 메인 액티비티가 없는 상태라면 oncreate 에서 인텐트를 받아야 하고
메인 액티비티가 있는 상태에서 시스탬의 인텐트를 받으려면
onNewIntent(매개변수로 인텐트 전달) 재정의해서 사용해야함.

intent.getStringExtra("command");

* 보통 서비스가 서버랑 통신을 하는 역할을 한다.




--------------------------------------------------------------------
# 브로드캐스트 수신자
브로드캐스팅(Broadcasting)이란 방송의 의미로 여러 사람에게 동시에
데이터를 전달한다는 뜻이다.

안드로이드 단말 안에서 메세지를 어떤 앱에 받아야 하는지 브로드캐스팅
방법으로 전달할 수 있다.
앱 쪽에서는 브로드캐스트 수신자를 만들어야 한다.

// 정적인 리시버
manifest.xml 에 BroadCastReceiver 등록. 
 
예시)
<receiver android:name=".receiver.MyBroadCastReceiver">
    <intent-filter>
        <action android:name="com.example.limky.broadcastreceiver.gogo"></action>
    </intent-filter>
</receiver>

인텐트 필터는 manifest 에서 설정

다음으로는 BroadCastReceiver 를 상속받아 onReceive()메서드를 오버라이딩
onReceive()메서드는 intent-filter을 통해 걸러진 intent를 받아들이는 곳

예시)
public class MyBroadCastReceiver extends BroadcastReceiver{
    @Override
    public void onReceive(Context context, Intent intent) {
            String actionName = intent.getAction();
        Toast.makeText(context, "받은 액션 : "+actionName , Toast.LENGTH_SHORT).show();

    }
}

// sendBroadCast 를 인위적으로 발생시켜보기

예시)
public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }

    public void clickMethod(View v){
          sendBroadcast(new Intent("com.example.limky.broadcastreceiver.gogo"));
   }

}

여기서 com.example.limky.broadcastreceiver.gogo 는 현제 액티비티의 
도메인인듯.

// 동적인 리시버

우선 Menifest.xml에 따로 receiver를 등록할 필요없이 MainActivity에서 모든 작업이 이루어진다.


1. 인텐트필터 생성 및 액션 등록
2. 브로드캐스트 익명클래스로 생성 및 구현
3. 브로드캐스트와 인텐트를 등록한다.
4. 등록한 브로드캐스를 종료한다.

예시)
public class MainActivity extends AppCompatActivity {

    private final String BROADCAST_MESSAGE = "com.example.limky.broadcastreceiver.gogo";
    private BroadcastReceiver mReceiver = null;
    private int number = 0;

    @Override
    protected void onResume() {
        super.onResume();
        registerReceiver();
    }

    @Override
    protected void onPause() {
        super.onPause();
        unregisterReceiver();

    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }
    /** 브로드 캐스트를 발생시킨다. **/
    public void clickMethod(View v){
        /** 1. 전달할 메세지를 담은 인텐트 생성
          * 2. DATA를 잘 전달받는지 확인할 수 있게 Key, value 넣기
          * 3. sendBroadcast(intent); 메서드를 이용해서 전달할 intent를 넣고, 브로드캐스트한다. */

        Intent intent = new Intent(BROADCAST_MESSAGE);
        intent.putExtra("value",number);
        sendBroadcast(intent);
        number++;

   }
    /** 동적으로(코드상으로) 브로드 캐스트를 등록한다. **/
    private void registerReceiver(){
        /** 1. intent filter를 만든다
         *  2. intent filter에 action을 추가한다.
         *  3. BroadCastReceiver를 익명클래스로 구현한다.
         *  4. intent filter와 BroadCastReceiver를 등록한다.
         * */
        if(mReceiver != null) return;

        final IntentFilter theFilter = new IntentFilter();
        theFilter.addAction(BROADCAST_MESSAGE);

        this.mReceiver = new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                int receviedData = intent.getIntExtra("value",0);
                if(intent.getAction().equals(BROADCAST_MESSAGE)){
                    Toast.makeText(context, "recevied Data : "+receviedData, Toast.LENGTH_SHORT).show();
                }
            }
        };

        this.registerReceiver(this.mReceiver, theFilter);

    }

    /** 동적으로(코드상으로) 브로드 캐스트를 종료한다. **/
    private void unregisterReceiver() {
          if(mReceiver != null){
                this.unregisterReceiver(mReceiver);
              mReceiver = null;
       }

    }
}


// 정적, 동적 차이점

정적 리시버는 한번등록하면, 쉽게 해체하기 어렵기 때문에 계속적으로 유지가 
되는 경향이 있다. 
하지만 동적 리시버는 등록과 해체가 유연하기 때문에 등록/해체가 빈번하게 
일어나는 경우엔 유리하다.

또 동적리시버는 정적리시버와 달리 자신을 등록한 해당 컴포넌트의 생명주기에
영향을 받는다.
그러면서 동시에 해당컴포넌트에 동적리시버를 구현했기 때문에 컴포넌트 안에
있는 변수와 메서드에 대한 접근이 유연하다.

하지만 주의해야할 점도 있다. 동적리시버는 등록과 해체를 자유자재로 할 수 
있기 때문에
필요할때만 등록하고 일을 다하면 꼭 해체시켜줘야지 불필요하게 중복으로 
리시버를 등록해서는 안된다.

*final : 지역변수를 상수화 시켜주는 명령어




----------------------------------------------------------------------
# 위험권한 부여하기 

manifest 에 권한을 등록하면 됐었지만 

마시멜로 버전부터는 권한을 일반 권한(Normal Permission)과 
위험 권한(Dangerous Permission)으로 나누었습니다.

그 이전에는 앱을 설치하는 시점에서만 권한을 부여할 것인지 물어보았는데 
사용자가 아무런 생각 없이 앱을 설치하는 경우가 많아 앱에서 아무리 많은 
권한을 요구해도 그냥 승인되는 경우가 많았기 때문입니다.

위험 권한은 앱이 실행된 후에 사용자에게 권한 허용을 요청해야 합니다.

예시)
public class MainActivity extends AppCompatActivity {

  @Override
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    int permissionCheck = ContextCompat.checkSelfPermission(this, Manifest.permission.RECEIVE_SMS);
    if (permissionCheck == PackageManager.PERMISSION_GRANTED) {
        Toast.makeText(this, "SMS 수신 권한 있음.", Toast.LENGTH_LONG).show();
    } else {
        Toast.makeText(this, "SMS 수신 권한 없음.", Toast.LENGTH_LONG).show();
        if (ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.RECEIVE_SMS)) {
            Toast.makeText(this, "SMS 권한 설명 필요함.", Toast.LENGTH_LONG).show();
        } else {
            ActivityCompat.requestPermissions(this, new String[] {Manifest.permission.RECEIVE_SMS}, 1);
        }
    }
}

// 권한을 받으면 우리쪽으로 알려줘야 한다 이때, callback 함수 사용
//generate -> override -> onRequestPermissionResult메소드 사용


        public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
            super.onRequestPermissionsResult(requestCode, permissions, grantResults);
// 윗 줄은 놔둬도 되지만 삭제해도 상관없는 부분 

            switch (requestCode){
                case 1:
                    if(grantResults.length > 0){
                        if(grantResults[0] == PackageManager.PERMISSION_GRANTED){
                            Toast.makeText(this,"SMS 수신권한을 사용자가 승인함.",Toast.LENGTH_LONG).show();
 
                        }else if(grantResults[0] == PackageManager.PERMISSION_DENIED){
                            Toast.makeText(this,"SMS 수신권한을 사용자가 거부함",Toast.LENGTH_LONG).show();
 
                        }else{
                            Toast.makeText(this,"SMS 수신 권한을 부여 받지 못함",Toast.LENGTH_LONG).show();
                        }
                    }
            }
        }












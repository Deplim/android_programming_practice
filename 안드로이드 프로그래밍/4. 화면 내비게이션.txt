<안드로이드 프로그래밍>

4. 화면 내비게이션

*화면 내비게이션 관련 기능들은 직접짜기엔 좀 복잡하고 이미 있는 sdk 를
이용하는 게 좋음
이제부터는 프래그먼트도 이해해야함

#프래그먼트 만들기 : https://recipes4dev.tistory.com/58

>>> 기본적으로 프래그먼트를 위한 java 파일과 xml 파일로 화면을 구성하고
그것을 xml 에 바로 넣을지, 자바 소스코드에서 fragmentmanager 를 이용해
서 넣을지만 결정하면 된다.

안드로이드가 나온지 얼마 되지 않은 초기 시절에, 전화기와 같은 작은 화면을
가진 디바이스만 있을 때는 Activity단위로 UI를 구성하는데 큰 번거러움이 
없었습니다. 화면 크기가 작아서 배치할 수 있는 구성요소가 많지 않고, 사용 
방법이 다양하지 않았으니까요.

그런데 큰 화면을 가진 안드로이드 태블릿 디바이스가 나오면서 상황이 조금 
달라졌습니다. 화면이 크다보니 많은 위젯들이 사용되어질 수 밖에 없는데, 
Activity 단위만으로는 그 복잡성을 커버하기가 쉽지 않아진 거죠. 물론 여러 
종류의 Layout들로 영역을 구분짓는 방법을 사용해도 되지만 다이나믹한 
동작(디바이스에 따른 View 보이기, 감추기, 위치이동 등)이 요구되는 UI를 
작성하자니 여간 번거로운 작업이 아니었습니다.

Fragment는 Activity 내에 생성되는, UI 구성을 여러 개의 모듈 단위로 작성할 
수 있도록 해주는 기능입니다. 또한 한번 작성된 Fragment는 여러 Activity에서
재사용이 가능하므로 UI 구성에 소요되는 작업량을 많은 부분 감소시킬 수 
있습니다.

"프래그먼트는 자체 수명 주기를 가지고, 자체 입력 이벤트를 받으며, 액티비티 
실행 중에 추가 및 제거가 가능한 액티비티의 모듈식 섹션이라고 생각하면 됩
니다(다른 액티비티에 재사용할 수 있는 "하위 액티비티"와 같은 개념)."


예시)

// Activity에 Fragment 추가.

<fragment
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:id="@+id/fragmentA"
        android:name="com.recipes4dev.examples.fragmentexample1.FragmentA"
        android:layout_weight="1"
        tools:layout="@layout/activity_main" />

    <FrameLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_weight="1"
        android:id="@+id/fragmentBorC" />

    <Button
        android:id="@+id/button1"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Switch Fragment"
        android:textSize="20sp" />

</LinearLayout>
 
FrameLayout은 Fragment B와 C가 교체되어 표시될 ViewGroup
Fragment의 속성 중 "android:name"에는 화면에 출력할 Fragment 
클래스를 지정합니다.


Layout 리소스 XML을 사용하는 것과 Java 코드에서 FragmentManager를 
사용하여 ViewGroup에 지정하는 두 가지가 있습니다.

첫번째 방법은 화면에 출력될 Fragment를 지정하거나 화면에서의 동적 변화
(show/hide)가 없는 경우에 주로 사용합니다. 


(1) 첫번째 방법//  Fragment를 위한 Layout 리소스 XML.

- "fragment_a.xml" -
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="vertical" android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="#FFAAAA">

    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textSize="30sp"
        android:text="Fragment A"
        android:gravity="center" />

</LinearLayout>


// Fragment 클래스 상속 및 구현.
public class FragmentA extends Fragment {
    public FragmentA() {
        // Required empty public constructor
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_a, container, false);
    }
}




(2) 두번째 방법 //Activity의 onCreate()에서 Fragment 초기화

Java 코드에서 Fragment를 다룰 때는 FragmentManager와 
FragmentTransaction 클래스를 사용합니다.

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        // ... 코드 계속

        FragmentManager fm = getSupportFragmentManager();
        FragmentTransaction fragmentTransaction = fm.beginTransaction();
        fragmentTransaction.add(R.id.fragmentBorC, new FragmentB());
        fragmentTransaction.commit();

        // 코드 계속 ...
    }

R.id.fragmentBorC 는 b, c 를 담기위해 만들었던 FrameLayout id


// Button 클릭 시, FragmentTransaction을 사용한 Fragment 교체
public class MainActivity extends AppCompatActivity {

    private boolean isFragmentB = true ;

    // ... 코드 계속
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        // ... 코드 계속 [STE]

        Button button1 = (Button) findViewById(R.id.button1) ;
        button1.setOnClickListener(new Button.OnClickListener() {
            @Override
            public void onClick(View v) {
                switchFragment() ;
            }
        });
    }

    public void switchFragment() {
        Fragment fr;

        if (isFragmentB) {
            fr = new FragmentB() ;
        } else {
            fr = new FragmentC() ;
        }

        isFragmentB = (isFragmentB) ? false : true ;

        FragmentManager fm = getSupportFragmentManager();
        FragmentTransaction fragmentTransaction = fm.beginTransaction();
        fragmentTransaction.replace(R.id.fragmentBorC, fr);
        fragmentTransaction.commit();
    }
}

* 이 코드대로 하면 버튼 한번누르면 b 에 남아있는 문제 있음




---------------------------------------------------------------------
# 프래그먼트로 이미지뷰어 만들기

일단 따로 fragment_list.xml 파일을 만들어서 그 안에 이미지 버튼 세개를 
만들자.

fragment_vier.xml 를 만들어서 이미지 하나를 넣어보자. 

super class 로  Fragment 를 설정하고 ListFragment 를 만들자.
그 클래스 안에 onCreateView 를 만들어 그 안에서 인플레이터로 
fragment_list 를 인플레이트한 결과의 리턴값을 ViewGroup rootView 
로 받자. 그리고 버튼을 찾아서 어떤 처리를 한 다음 rootView 를 리턴할 
것이다.

super class  로 Fragment 를 설정하고 ViewerFragment 를 만들자.
그 클래스 안에서 똑같이 인플레이터로 이번엔 fragment_viewer 을 찾아서
이미지 객체를 찾고 어떤 처리를 한 다음 rootView 를 리턴할 것이다.

이제 버튼이 클릭되었을때 viewerfragment 쪽의 이미지를 바꿔주게 만들어
볼 것이다. 각각의 버튼에 대한 이벤트 처리를 만들어주자.

그런데 프래그먼트에서 다른 프래그먼드를 요청할 순 없고 mainactivity 쪽에
요청을 해야한다.
매인 액티비티 자바에서 이미지를 바꾸는 용도로 onImageChange 함수를 하나
만들어보자.

ListFragment class 의 onAttach - 프래그먼트가 액티비티
로 올라오는 순간 -  에서  getActivity(); 라고해서 참조할수가 있다.
그걸 클래스 변수에 할당을 해 놓고 

버튼의 onClick 에서 acitivity.onImageChange(0); 이라는 형식으로 참조하면
된다. 그 넘겨주는 매개변수에 따라 이미지가 다르게 바뀔 것이다.

메인 액티비티에서 이 프래그먼트들을 만들 때에는 
getSupportFragmentManager(); 를 쓸수도 있고 
자바 소스 없이 xml 레이아웃에다 바로 추가할 수도 있을 것이다.


바로 레이아웃에 fragment 를 추가한다고 하면 
ListFragement, ViewerFragment 두개를 위한 fragment 를 각각 만들어야
한다.

인플레이션된 프레그먼트를 찾는거는 view 와 좀 다르다.
예시)
FragmentManager manager;
manager = getSupportFragmentManager();

fragment1 = manager.findFragmentById(R.id.ListFragment)

onImageChange 안에서는
fragment2.setImage(index);

또 fragment2 안에서는
public void setImage(int index){
if(index == 0){
imageView.setImageResource(R.drawable.dream01);
}
else if  ... 반복
}

* 다른 개발자가 만든 라이브러리 같은 경우에도, UI 관련된 라이브러리는 
프래그먼트를 거의 일반적으로 사용한다.




----------------------------------------------------------------------
# 액션바 구성하기 

>>> actionBar 객체를 가져와서 활용하기.


자동으로 만들어지는 화면의 위쪽에는 타이틀이 보입니다.
이 타이틀 부분을 액션바라고 부르는데 타이틀 글자 이외에도 메뉴가 표시될 
수 있습니다.
메뉴를 쉽게 넣을 수 있도록 옵션메뉴라는 것이 제공되며 이런 메뉴 외에도 
이미지나 뷰를 액션바에 넣을 수 있습니다.

액션바는 액티비티의 스타일에 따라 자동으로 만들어집니다.
디폴트 값은 액션바가 있는 스타일이지만 매니페스트 파일 안에 <activity> 
태그를 추가할 때 다른 스타일을 지정하면 액션바가 없앨 수도 있습니다.



예시)
일단 custom 으로 액션바에 넣을 xml 파일을 만든다.

이후 메인 액티비티에서

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        ActionBar actionBar = getSupportActionBar();
 
        // Custom Actionbar를 사용하기 위해 CustomEnabled을 true 시키고 필요 없는 것은 false 시킨다
        actionBar.setDisplayShowCustomEnabled(true);
        actionBar.setDisplayHomeAsUpEnabled(false);            //액션바 아이콘을 업 네비게이션 형태로 표시합니다.
        actionBar.setDisplayShowTitleEnabled(false);        //액션바에 표시되는 제목의 표시유무를 설정합니다.
        actionBar.setDisplayShowHomeEnabled(false);            //홈 아이콘을 숨김처리합니다.
 
 
        //layout을 가지고 와서 actionbar에 포팅을 시킵니다.
        LayoutInflater inflater = (LayoutInflater)getSystemService(LAYOUT_INFLATER_SERVICE);
        View actionbar = inflater.inflate(R.layout.custom_actionbar, null);
 
        actionBar.setCustomView(actionbar); 
 
        //액션바 양쪽 공백 없애기
        Toolbar parent = (Toolbar)actionbar.getParent();
        parent.setContentInsetsAbsolute(0,0);
 
        return true;
    }
}


ActionBar actionBar 는 진짜 액션바 객체고 
View actionbar 는 임시로 이름만 액션바인 일반 view 를 만든 것이니 혼동하지
말것.
나머지는 코드 주석만 봐도 이해할 수 있음

xml 은 그냥 res>android 에 일반 xml 파일로 만들수도 있지만
res>meue 폴더를 만들고 그 안에 넣으면 그 파일은 메뉴 파일로 인식된다.
메뉴를 위한 XML 파일에는 <menu> 태그를 넣을 수 있으며, 그 안에 <item>
태그가 들어간다.

예시)
<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto">

    <item android:id="@+id/menu_refresh"
        android:title="새로고침"
        android:icon="@drawable/menu_refresh"
        app:showAsAction="always" />

</menu>


@Override
public boolean onCreateOptionsMenu(Menu menu) {
    getMenuInflater().inflate(R.menu.menu_main, menu);
    return true;
}

@Override
public boolean onOptionsItemSelected(MenuItem item) {
    int curId = item.getItemId();
    switch(curId) {
      case R.id.menu_refresh:
         Toast.makeText(this, "새로고침 메뉴가 선택되었습니다.", Toast.LENGTH_SHORT).show();
         break;

         중략…


* 액션바 보이고 숨기기
ActionBar abar = getActionBar();
abar.show();
abar.hide();




---------------------------------------------------------------------
# 탭의 구성

>>> 탭 레이아웃 활용.

탭은 SDK에서 제공하는 위젯을 사용할 수도 있고 직접 만들 수도 있습니다.
탭 위젯은 크게 세 가지 구성 요소로 이루어집니다.

예제)
상단에 탭 버튼이 있고 버튼을 누를 때마다 가운데 부분에 중첩되어 있는 화면이
 바뀌어 보이는 구조로, 가운데 부분은 여러 화면을 중첩시킬 수 있도록 프레임 
레이아웃을 사용하게 됩니다.

레이아웃에 추가

메인 액티비티의 XML 레이아웃에 상단 타이틀 부분의 레이아웃을 직접 정의할 
수 있습니다.

자동으로 만들어지는 메인 액티비티의 레이아웃에는 타이틀 부분이 빠져있고 
액션바가 들어간 스타일이 지정되어 있지만 액션바가 들어가 있지 않은 스타일
로 바꾸는 경우에는 직접 상단의 타이틀 부분 레이아웃을 만들 수 있습니다.

레이아웃의 구조는 다음과 같습니다.

<CoordinatorLayout>
   <AppBarLayout>
      <Toolbar>
      </Toolbar>
      <TabLayout>
      </TabLayout>
   </AppBarLayout>
   <FrameLayout>
   </FrameLayout>
</CoordinatorLayout>
 상단의 액션바 부분과 가운데 내용이 보이는 부분이 함께 들어간 구조에서는
두 부분의 크기가 잘 맞게 보여야 하므로 CoordinatorLayout이 사용됩니다.

그리고 그 안에 AppBarLayout과 FrameLayout이 들어갑니다.

AppBarLayout이 상단의 액션바 영역, FrameLayout이 내용이 보이는 화면
 부분이 됩니다.

Toobar는 액션바 안에서 타이틀이 메뉴 아이콘이 보일 영역을 말하며 탭 버튼이
 그 아래에 보일 수 있도록 TabLayout이 들어가 있습니다.

탭 버튼을 보이지 않게 하고 싶다면 TabLayout을 넣지 않으면 됩니다.

 

// 소스에서 탭 추가

이 레이아웃을 메인 액티비티에 설정하려면 액션바가 없는 스타일로 변경해야 
합니다.

/res/values 폴더 안에 있는 styles.xml 파일을 열고 AppTheme이라는 이름을 
가진 스타일 정보를 Theme.AppCompat.Light.NoActionBar 로 변경합니다.

<style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar">
메인 액티비티의 스타일이 AppTheme으로 설정되어 있기 때문에 
NoActionBar 스타일로 바꾸면 메인 액티비티에는 액션바가 만들어지지 
않습니다.

이제 소스에서 프래그먼트를 세 개 만들고 각각의 프래그먼트가 상단의 탭 
버튼을 누를 때마다 가운데 프레임레이아웃 안에 보일 수 있도록 만듭니다.

먼저 TabLayout에 탭 버튼을 추가합니다.

TabLayout tabs = (TabLayout) findViewById(R.id.tabs);
tabs.addTab(tabs.newTab().setText("통화기록"));
tabs.addTab(tabs.newTab().setText("스팸기록"));
tabs.addTab(tabs.newTab().setText("연락처"));
탭 버튼을 눌렀을 때 각각의 프래그먼트가 보이도록 합니다.

프래그먼트를 바꾸어 보이게 하려면 프레임 레이아웃에 중첩시켰다가 가시성 
속성으로 보이도록 할 수도 있지만 여기에서는 프래그먼트 매니저를 이용해 
변경합니다.

tabs.setOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {
  @Override
  public void onTabSelected(TabLayout.Tab tab) {
    int position = tab.getPosition();
    Log.d("MainActivity", "선택된 탭 : " + position);

    Fragment selected = null;
    if (position == 0) {
        selected = fragment1;
    } else if (position == 1) {
        selected = fragment2;
    } else if (position == 2) {
        selected = fragment3;
    }

    getSupportFragmentManager().beginTransaction().replace(R.id.container, selected).commit();
}
이렇게 하면 탭 버튼을 누를 때마다 각 버튼에 해당하는 프래그먼트로 교체되어
보이게 됩니다.




----------------------------------------------------------------------
# 뷰페이저 만들기
뷰페이저는 좌우 스크롤을 통해 여러 개의 화면을 전환할 수 있도록 만든 
것입니다.

>>>ViewPager 레이아웃을 활용하고 거기에 Pager 전용 어뎁터를 붙이는 식.



뷰페이저 안에 들어가는 각각의 화면은 프래그먼트로 만들 수 있으며 어댑터 
패턴을 사용하여 프래그먼트들을 관리할 수 있습니다.

프래그먼트를 하나의 아이템으로 관리하는 어댑터는 SDK에서 미리 만들어져 
제공되는 어댑터를 사용하는 것이 일반적입니다.

// 레이아웃에 추가

메인 액티비티의 XML 레이아웃에 뷰페이저를 추가합니다.

뷰페이저는 support 라이브러리에 들어가 있으므로 패키지 이름까지 넣어주어야 합니다.

<android.support.v4.view.ViewPager
    android:id="@+id/pager"
    android:layout_width="match_parent"
    android:layout_height="match_parent">
</android.support.v4.view.ViewPager>
 

// 어댑터 정의

어댑터는 SDK에서 제공하는 FragmentStatePagerAdapter를 상속하여 만듭니다.

SDK에서 제공하는 다른 어댑터를 사용할 수도 있지만 각 아이템으로 프래그먼트를 넣는 경우에는 이 클래스를 사용하는 경우가 많습니다.

어댑터에는 프래그먼트 객체를 담을 ArrayList를 선언하고 필수 메소드를 정의합니다.

class MoviePagerAdapter extends FragmentStatePagerAdapter {
    ArrayList<Fragment> items = new ArrayList<Fragment>();

    public MoviePagerAdapter(FragmentManager fm) {
        super(fm);
    }

    public void addItem(Fragment item) {
        items.add(item);
    }

    @Override
    public Fragment getItem(int position) {
        return items.get(position);
    }

    @Override
    public int getCount() {
        return items.size();
    }

}
 

// 뷰페이저에 어댑터 설정

어댑터를 정의했다면 뷰페이저에 어댑터 객체를 설정해야 합니다.

어댑터에는 프래그먼트 객체를 만들어 넣을 수 있으며 이 프래그먼트가 화면에 보이게 됩니다.

public class MainActivity extends AppCompatActivity {
    ViewPager pager;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        pager = (ViewPager) findViewById(R.id.pager);
        pager.setOffscreenPageLimit(3);

        MoviePagerAdapter adapter = new MoviePagerAdapter(getSupportFragmentManager());

        Fragment1 fragment1 = new Fragment1();
        adapter.addItem(fragment1);

        Fragment2 fragment2 = new Fragment2();
        adapter.addItem(fragment2);

        Fragment3 fragment3 = new Fragment3();
        adapter.addItem(fragment3);

        pager.setAdapter(adapter);













